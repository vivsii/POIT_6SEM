/**
 *  A BitArray object exhibiting the interface of standard ecmascript TypedArray's
 *  cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
 *
 *  @author swiing
 */
declare type bit = 0 | 1;
declare class BitArray implements Iterable<bit> {
    buffer: ArrayBufferLike;
    byteLength: number;
    byteOffset: number;
    length: number;
    prototype: object;
    [Symbol.iterator]: () => Iterator<bit>;
    [index: number]: bit;
    static BYTES_PER_ELEMENT: number;
    static from(source: Iterable<any>): BitArray;
    static of(...items: any[]): BitArray;
    /**
     * At this stage, only the ( length ) signature is supported.
     * @todo: other signatures - cf. https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray
     * @param length
     * @returns a proxy instance
     */
    constructor(arg: number | Iterable<any>);
    /**
     * Returns a string representation of an array.
     */
    toString(): string;
    /**
     * Performs the specified action for each element in an array.
     * @param callbackfn  A function that accepts up to three arguments. forEach calls the
     * callbackfn function one time for each element in the array.
     * @param thisArg  An object to which the this keyword can refer in the callbackfn function.
     * If thisArg is omitted, undefined is used as the this value.
     */
    forEach(callbackfn: (value: bit, index: number, array: BitArray) => void, thisArg?: any): void;
    at(index: number): bit | undefined;
    /**
     * Sets a value or an array of values.
     * @param array A typed or untyped array of values to set.
     * @param offset The index in the current array at which the values are to be written.
     */
    set(array: ArrayLike<bit> | ArrayLike<boolean>, offset?: number): void;
    values(): {
        next: () => IteratorReturnResult<any> | IteratorYieldResult<bit> | {
            done: boolean;
            value: bit;
        };
    };
}
export default BitArray;
export { bit };
