"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const bitarray_js_1 = __importDefault(require("../src/bitarray.js"));
const util_js_1 = require("./util.js");
const len = 33; // choose any integer value
(0, util_js_1.logHeader)('Randomly initializing an array');
const randomArray = new bitarray_js_1.default(len);
for (let i = 0; i < len; i++)
    randomArray[i] = (Math.random() > 0.5);
(0, util_js_1.log)('instanceof == BoolArray', randomArray instanceof bitarray_js_1.default);
(0, util_js_1.log)('array == ', randomArray);
(0, util_js_1.logHeader)('properties');
(0, util_js_1.log)('.count', randomArray.count);
(0, util_js_1.logHeader)('Bitwise operations');
const sample1 = bitarray_js_1.default.from([
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
].concat([
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
]));
const sample2 = bitarray_js_1.default.from([
    false,
    true,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    false,
    true,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
].concat([
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    false,
    true,
    false,
    false,
    true,
    false,
    false,
    false,
    true,
]));
(0, util_js_1.log)('sample1 = ', sample1.toString());
(0, util_js_1.log)('sample2 = ', sample2.toString());
(0, util_js_1.log)('s1 | s2 = ', sample1['|'](sample2).toString());
(0, util_js_1.log)('s1 ^ s2 = ', sample1['^'](sample2).toString());
(0, util_js_1.log)('s1 & s2 = ', sample1['&'](sample2).toString());
